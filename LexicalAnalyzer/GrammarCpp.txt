translation-unit ::= definition-seq-opt

definition-seq-opt ::= definition-seq
					|  lambda
definition-seq ::= defintion
				|  defintion defintion-seq
definition ::= variable-declaration
			|  function-defintion

======================================
======== function definition =========
======================================

function-definition ::= function-defintion-header expr-block
function-definition-header ::= type function-name left-paren func-arg-list-opt right-paren
left-paren ::= '('
right-paren ::= ')'
func-arg-list-opt ::= func-arg-list
					| lambda
func-arg-list ::= type identifier
				| type identifier comma-separator func-arg-list
comma-separator ::= ','
type ::= const-spec-opt type-name pointer-spec-opt reference-spec-opt
const-spec-opt ::= const-spec
				|  lambda
const-spec ::= 'const'
pointer-spec-opt ::= point-spec
				  |  lambda
pointer-spec ::= '*'
			  |  '*' pointer-spec
reference-spec-opt ::= '&'
					|   lambda

======================================
============ statements ==============
======================================

compound-statement ::= left-brace statement-seq-opt right-brace
left-brace ::= '{'
right-brace::= '}'
statement-seq-opt ::= statement-seq
			  		|  lambda
statement-seq ::= statement
		  	   |  statement statement-seq

statement ::= expression-statement
			| declaration-statement
			| if-statement
			| while-statement

if-statement ::= if ( condition ) statement
               | if ( condition ) statement else statement

               

expression-statement ::= expression-opt ;
expression-opt ::= expression
				|  lambda

primary-expression:
        identifier
        literal
        ( expression )

postfix_expression:
        primary-expression postfix_expression'
postfix_expression':
        ++ postfix_expression'
        -- postfix_expression'
        lambda

unary_expression:
        postfix_expression
        unary_operator postfix_expression

unary_operator:
        ! + - * & ~

multiplicative_expression:
        unary_expression multiplicative_expression'
multiplicative_expression':
        * unary_expression multiplicative_expression'
        / unary_expression multiplicative_expression'
        % unary_expression multiplicative_expression'
        lambda

additive_expression:
        multiplicative_expression additive_expression'
additive_expression':    
        + multiplicative_expression additive_expression'
        - multiplicative_expression additive_expression'
        lambda

shift_expression:
        additive_expression shift_expression'
shift_expression':
        << additive_expression shift_expression'
        >> additive_expression shift_expression'
        lambda

relational_expression:
        shift_expression relational_expression'
relational_expression':
        < shift_expression relational_expression'
        > shift_expression relational_expression'
        <= shift_expression relational_expression'
        >= shift_expression relational_expression'
        lambda

equality_expression:
        relational_expression equality_expression'
equality_expression':
        == relational_expression equality_expression'
        != relational_expression equality_expression'
        lambda

and_expression:
        equality_expression and_expression'
and_expression':
        & equality_expression and_expression'
        lambda

exclusive_or_expression:
        and_expression exclusive_or_expression'
exclusive_or_expression':
        ^ and_expression exclusive_or_expression'
        lambda

inclusive_or_expression:
        exclusive_or_expression inclusive_or_expression'
inclusive_or_expression'
        | exclusive_or_expression inclusive_or_expression'
        lambda

logical_and_expression:
        inclusive_or_expression logical-and-expression'
logical-and-expression':
        && inclusive_or_expression logical-and-expression'
        lambda 

logical_or_expression:
        logical_and_expression logical-or-expression'
logical-or-expression':
		|| logical_and_expression logical-or-expression'
		lambda

assignment-expression ::= logical-or-expression assignment-operator assignment-expression
    | logical-or-expression

assignment-operator ::= '=' | '*=' '/=' '%=' '+=' '-=' >>= <<= &= ^= |=
expression ::= assignment-expression

